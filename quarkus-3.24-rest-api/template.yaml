AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS Lambda with Quarkus 3.24 REST API
  Sample SAM Template

Parameters:
  Stage:
    Type: String
    Default: prod
    
Globals:
  Function:
    Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest
    CodeUri: target/function.zip
    Runtime: java21
    SnapStart:
      ApplyOn: PublishedVersions     
    Timeout: 30 
    MemorySize: 1024
    Architectures:
      #- arm64
      - x86_64  
    #Tracing: Active
    Environment:
      Variables:
        JAVA_TOOL_OPTIONS: "-XX:+TieredCompilation -XX:TieredStopAtLevel=1"
        PRODUCT_TABLE_NAME: !Ref ProductsTable

Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      #TracingEnabled: true
      Name: AWSLambdaQuarkus324RestAPI
      Description: Api for AWSLambdaQuarkus 3.24 Rest API 
      AccessLogSetting:
        DestinationArn: !Sub ${MyApiLogGroup.Arn} # This Log Group is already created within our SAM Template
        Format: "{'integrationLatency':'$context.integrationLatency', 'latency':'$context.responseLatency', 'requestId':'$context.requestId', 'ip': '$context.identity.sourceIp', 'caller':'$context.identity.caller', 'user':'$context.identity.user','requestTime':'$context.requestTime', 'xrayTraceId':'$context.xrayTraceId', 'wafResponseCode':'$context.wafResponseCode', 'httpMethod':'$context.httpMethod','resourcePath':'$context.resourcePath', 'status':'$context.status','protocol':'$context.protocol', 'responseLength':'$context.responseLength' }"
      #MethodSettings:
       # - MetricsEnabled: True
       #   ResourcePath: '/*'
       #   HttpMethod: '*'
      Auth:
        ApiKeyRequired: true  # sets for all methods
  
      
        
  MyApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
       LogGroupName: !Sub "/aws/apigateway/${MyApi}"
       RetentionInDays: 7
      
  MyApiUsagePlan:
     Type: AWS::ApiGateway::UsagePlan
     DependsOn:  
        - MyApiStage
     Properties:
      ApiStages: 
        - ApiId: !Ref MyApi
          Stage: !Ref Stage
      UsagePlanName: AWSLambdaQuarkus324RestAPIUsagePlan
      Description: Usage plan for AWSLambdaQuarkus324RestAPI
      Quota:
          Limit: 2000000
          Period: DAY
      Throttle:
          RateLimit:  10000
          BurstLimit: 5000   

  MyApiKey: 
    Type: AWS::ApiGateway::ApiKey
    DependsOn:  
       - MyApiStage
    Properties: 
      Name: "AWSLambdaQuarkus324RestApiKey"
      Description: "AWSLambdaQuarkus324 Rest API Key"
      Enabled: true
      GenerateDistinctId: false
      Value: a6ZbcDefQW12BN56WEV324Rest
      StageKeys:
        - RestApiId: !Ref MyApi
          StageName: !Ref Stage

  MyApiUsagePlanKey:
      Type: "AWS::ApiGateway::UsagePlanKey"
      DependsOn: 
      - MyApi
      Properties:
        KeyId: !Ref MyApiKey
        KeyType: API_KEY
        UsagePlanId: !Ref MyApiUsagePlan


  GetProductByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetProductByIdWithWithQuarkus324Rest
      AutoPublishAlias: liveVersion
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ProductsTable
      Environment:
        Variables:
          QUARKUS_LAMBDA_HANDLER: getProductById
      Events:
        GetRequestById:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /products/{id}
            Method: get     
            
            
  GetProductByIdFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetProductByIdFunction}"
      RetentionInDays: 7

  
  PutProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutProductWithQuarkus324Rest
      AutoPublishAlias: liveVersion 
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductsTable
      Environment:
        Variables:
          QUARKUS_LAMBDA_HANDLER: putProduct
      Events:
        PutRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /products/
            Method: put

  PutProductFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PutProductFunction}"
      RetentionInDays: 7

  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "AWSLambdaQuarkus324RestProductsTable"
      PointInTimeRecoverySpecification:
         PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: 'PK'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'PK'
          KeyType: 'HASH'
      BillingMode: PAY_PER_REQUEST    
      #ProvisionedThroughput: 
        #ReadCapacityUnits: "1"
        #WriteCapacityUnits: "1"
      

Outputs:
  AWSLambdaQuarkus324ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for AWSLambdaQuarkus 3.24 Rest"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/prod/products"
